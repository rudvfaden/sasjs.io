{
    "docs": [
        {
            "location": "/", 
            "text": "Building Web Applications using SAS\u00ae\n\n\nWhilst SAS gives you the Power to Know, HTML5 gives you the Power to Show!  It's a powerful combination for automating workflows, surfacing analytics, and building breathtaking user experiences.\n\n\nIt's fast, it's easy, and it's fun!\n\n\nYou can build an app on SAS9 in just 2 lines of code:\n\n\nfilename\n \nplayme\n \nurl\n \nhttps://sasjs.io/game\n;\n\n\n%inc\n \nplayme\n;\n\n\n\n\n\nBelow is a demo of building and deploying a React App on SAS Viya, with two services in just 5 minutes:\n\n\n\n\n\nWhat is this?\n\n\nSASjs is a framework - a collection of independent tools which, taken together, provide a serious accelerator to web development projects.\n\n\nIt consists of three parts:\n\n\n\n\n\n\nMacro library (\nmacrocore\n).  A collection of SAS macro based tools for app development.  See \ndocumentation\n.\n\n\n\n\n\n\nCLI tool (\nsasjs-cli\n).  An NPM command line utility for automating the compilation, build and deployment of your SAS-Powered HTML5 Application.\n\n\n\n\n\n\nData Adapter (\nsasjs\n). A JS library to handle the communication between your HTML5 application and the SAS 9 or Viya backend.  See \ndocumentation", 
            "title": "Home"
        }, 
        {
            "location": "/#building-web-applications-using-sas", 
            "text": "Whilst SAS gives you the Power to Know, HTML5 gives you the Power to Show!  It's a powerful combination for automating workflows, surfacing analytics, and building breathtaking user experiences.  It's fast, it's easy, and it's fun!  You can build an app on SAS9 in just 2 lines of code:  filename   playme   url   https://sasjs.io/game ;  %inc   playme ;   Below is a demo of building and deploying a React App on SAS Viya, with two services in just 5 minutes:", 
            "title": "Building Web Applications using SAS\u00ae"
        }, 
        {
            "location": "/#what-is-this", 
            "text": "SASjs is a framework - a collection of independent tools which, taken together, provide a serious accelerator to web development projects.  It consists of three parts:    Macro library ( macrocore ).  A collection of SAS macro based tools for app development.  See  documentation .    CLI tool ( sasjs-cli ).  An NPM command line utility for automating the compilation, build and deployment of your SAS-Powered HTML5 Application.    Data Adapter ( sasjs ). A JS library to handle the communication between your HTML5 application and the SAS 9 or Viya backend.  See  documentation", 
            "title": "What is this?"
        }, 
        {
            "location": "/quickstart/services/", 
            "text": "Services\n\n\nAll of the quickstart apps use two backend services, both of which query the \nsashelp.springs\n dataset. The first is used to fetch a list of areas (to populate the dropdown) and the other will fetch a list of springs for a chosen area (to populate the grid).\n\n\nThe process for registering these services is almost identical between \nSAS9\n and \nViya\n.\n\n\nSimply open SAS Studio (must be StudioV in Viya) and run the code below.\n\n\n%let\n \nappLoc\n=/\nPublic\n/\napp\n;\n  \n/* Configure Metadata or Viya Folder location here */\n\n\nfilename\n \nmc\n \nurl\n \nhttps://raw.githubusercontent.com/sasjs/core/main/all.sas\n;\n\n\n%inc\n \nmc\n;\n \n/* compile macros */\n\n\nfilename\n \nft15f001\n \ntemp\n;\n\n\nparmcards4\n;\n\n  \nproc\n \nsql\n;\n\n  \ncreate\n \ntable\n \nareas\n \nas\n \nselect\n \ndistinct\n \narea\n \nfrom\n \nsashelp\n.\nsprings\n;\n\n  \n%webout\n(\nOPEN\n)\n\n  \n%webout\n(\nOBJ\n,\nareas\n)\n\n  \n%webout\n(\nCLOSE\n)\n\n\n;;;;\n\n\n%mp_createwebservice\n(\npath\n=\nappLoc\n/\ncommon\n,\nname\n=\nappinit\n)\n\n\n\nfilename\n \nft15f001\n \ntemp\n;\n\n\nparmcards4\n;\n\n  \n%webout\n(\nFETCH\n)\n \n/* fetch areas table sent from frontend */\n\n  \nproc\n \nsql\n;\n\n  \ncreate\n \ntable\n \nsprings\n \nas\n \nselect\n \n*\n \nfrom\n \nsashelp\n.\nsprings\n\n    \nwhere\n \narea\n \nin\n \n(\nselect\n \narea\n \nfrom\n \nareas\n);\n\n  \n%webout\n(\nOPEN\n)\n\n  \n%webout\n(\nOBJ\n,\nsprings\n)\n\n  \n%webout\n(\nCLOSE\n)\n\n\n;;;;\n\n\n%mp_createwebservice\n(\npath\n=\nappLoc\n/\ncommon\n,\nname\n=\ngetdata\n)", 
            "title": "Services"
        }, 
        {
            "location": "/quickstart/services/#services", 
            "text": "All of the quickstart apps use two backend services, both of which query the  sashelp.springs  dataset. The first is used to fetch a list of areas (to populate the dropdown) and the other will fetch a list of springs for a chosen area (to populate the grid).  The process for registering these services is almost identical between  SAS9  and  Viya .  Simply open SAS Studio (must be StudioV in Viya) and run the code below.  %let   appLoc =/ Public / app ;    /* Configure Metadata or Viya Folder location here */  filename   mc   url   https://raw.githubusercontent.com/sasjs/core/main/all.sas ;  %inc   mc ;   /* compile macros */  filename   ft15f001   temp ;  parmcards4 ; \n   proc   sql ; \n   create   table   areas   as   select   distinct   area   from   sashelp . springs ; \n   %webout ( OPEN ) \n   %webout ( OBJ , areas ) \n   %webout ( CLOSE )  ;;;;  %mp_createwebservice ( path = appLoc / common , name = appinit )  filename   ft15f001   temp ;  parmcards4 ; \n   %webout ( FETCH )   /* fetch areas table sent from frontend */ \n   proc   sql ; \n   create   table   springs   as   select   *   from   sashelp . springs \n     where   area   in   ( select   area   from   areas ); \n   %webout ( OPEN ) \n   %webout ( OBJ , springs ) \n   %webout ( CLOSE )  ;;;;  %mp_createwebservice ( path = appLoc / common , name = getdata )", 
            "title": "Services"
        }, 
        {
            "location": "/quickstart/react/", 
            "text": "React\n\n\nThe React seed app is based on \ncreate-react-app\n with some additional components, eg for handling the SAS login and the history of requests.\n\n\nThe repo is here:  \nhttps://github.com/sasjs/react-seed-app\n.", 
            "title": "React"
        }, 
        {
            "location": "/quickstart/react/#react", 
            "text": "The React seed app is based on  create-react-app  with some additional components, eg for handling the SAS login and the history of requests.  The repo is here:   https://github.com/sasjs/react-seed-app .", 
            "title": "React"
        }, 
        {
            "location": "/design/", 
            "text": "Design\n\n\nSave yourself a lot of rework by getting at least a rough idea of what you want to build, before you build it!\n\n\nThe frontend design process is split between UX (User Experience, the overall flow) and UI (the User Interface, the actual look and feel).\n\n\nUseful tools:\n\n\n\n\nmockplus\n\n\nbalsamiq\n - wireframes\n\n\nlucidchart.com\n - great for diagrams\n\n\nfigma.com\n - browser based design tool\n\n\n\n\nFrameworks\n\n\nIt's possible to build good looking apps quickly without having to specify every detail if you can follow existing style guides / frameworks.  Choices include:\n\n\n\n\nSemantic ui\n - with a specific \nversion\n for React\n\n\nClarity Design\n - Angular but will soon support React / Vue also\n\n\nMaterial Design\n - built by Google\n\n\nFluent UI\n - built by Microsoft\n\n\n\n\nImage Editing\n\n\n\n\nhttps://svgtopng.com\n\n\nhttps://www.photopea.com\n - adobe like\n\n\nhttps://onlinepngtools.com/convert-png-to-jpg\n - for adding background in png\n\n\nhttps://www.calculatorsoup.com/calculators/math/ratios.php\n - maintaining ratio stuff", 
            "title": "Design"
        }, 
        {
            "location": "/design/#design", 
            "text": "Save yourself a lot of rework by getting at least a rough idea of what you want to build, before you build it!  The frontend design process is split between UX (User Experience, the overall flow) and UI (the User Interface, the actual look and feel).  Useful tools:   mockplus  balsamiq  - wireframes  lucidchart.com  - great for diagrams  figma.com  - browser based design tool", 
            "title": "Design"
        }, 
        {
            "location": "/design/#frameworks", 
            "text": "It's possible to build good looking apps quickly without having to specify every detail if you can follow existing style guides / frameworks.  Choices include:   Semantic ui  - with a specific  version  for React  Clarity Design  - Angular but will soon support React / Vue also  Material Design  - built by Google  Fluent UI  - built by Microsoft", 
            "title": "Frameworks"
        }, 
        {
            "location": "/design/#image-editing", 
            "text": "https://svgtopng.com  https://www.photopea.com  - adobe like  https://onlinepngtools.com/convert-png-to-jpg  - for adding background in png  https://www.calculatorsoup.com/calculators/math/ratios.php  - maintaining ratio stuff", 
            "title": "Image Editing"
        }, 
        {
            "location": "/security/", 
            "text": "Security\n\n\nDeploying web apps is generally more secure than, say, Python or R, because the Javascript libraries that are included do not have access to the filesystem. The browser \"sandbox\" also prevents JS files loaded from a one domain from making calls to another domain (Cross Origin Resource Sharing / \nCORS\n). That said, there are still a few security considerations to keep in mind when building apps on SAS.\n\n\nShared Services account\n\n\nA shared system account for running web services is preferred as it can enable functionality for users that they cannot (or should not) perform themselves, eg database modifications (and for that, you should seriously consider \nData Controlller for SAS\u00ae\n).  It can also avoids unix permissions issues, as created files are owned by default under the end user identity.\n\n\nHowever - as it is a shared account, the ability to run code under this identity should be appropriately governed.  In particular, code injection must be protected against - for this reason, URL parameters are a bad idea, much better to send tables using an adapter such as \nSASjs\n. \n\n\nIt is also recommended to ensure you have a secure release process, which includes code review and automated testing, to ensure the safety of your production environment.\n\n\nSAS 9\n\n\nBy default your services will run on a Stored Process server under the shared credentials stored in the \nSAS General Servers group\n group (\nsassrv\n per factory settings). \n\n\nIt is also possible to run STPs under a Workspace Server context (where end user OS credentials match \nsysuserid\n). \n\n\nSAS Viya\n\n\nBy default, services will run on the SAS Compute server under the client identity.  Since Viya 3.5 it is also possible to run under a shared identity, and to pool the session - see \ndocumentation\n.\n\n\nFolder Security\n\n\nThe recommended SASjs folder structure is to group services into app subfolders, so that security can be applied at backend. The app itself can also be secured by setting permission on the parent folder. There is one more thing to consider - services can be viewed (and executed) by anyone who has the READ permission, either using the \nSERVERURL/SASStoredProcess?_action=1063\n url or by navigating in \nSASJobExecution\n on Viya. Therefore your services should be built in such a way that no damage would be caused if an end user were to accidentally 'click' on one of the services and run it.\n\n\nThis folder structure is enforced when using the \nsasjs-cli\n tool.\n\n\nIdempotence\n\n\nServices should be built in such a way that they can be safely executed more than once. This is because it's possible that it WILL be run more than once (eg if the user clicks a button twice in succession).\n\n\nSubResource Integrity\n\n\nAn integrity hash is a checksum of a file - if just one character inside a file is changed, the checksum is totally different. This makes it a great tool for verifying that a CSS or JS file has not been modified since the checksum was generated. Content served over http (without SSL certificates) are extremely susceptible to Man in the Middle (MitM) \nattacks\n. For this reason, it is best practice to either bundle all your dependencies inside your app, or apply SubResource Integrity (SRI) checking as per the \nw3.org spec\n. The syntax looks like this:\n\n\nscript\n \nsrc\n=\nhttps://cdn.jsdelivr.net/npm/sasjs@1.10.8/index.js\n\n  \nintegrity\n=\nsha256-651B1pxDxaKb9yhXQOUSohZ+Nq9Txfc3gXlX/GSw1RQ=\n\n  \ncrossorigin\n=\nanonymous\n/\nscript\n\n\n\n\n\nIf your CSS or JS files are released via github, then they are automatically available with SRI checks using \nJSDelivr\n - for instance, to get the latest script tag for \nSASjs\n you can just click \nhere\n and select \"SRI\".\n\n\nIf your files are elsewhere, or you'd like more control over the build, you can also generate the integrity hash yourself - here is the syntax:\n\n\ncat myfile.js | openssl dgst -sha384 -binary | openssl enc -base64\n\n\n\n\nThird Party Server\n\n\nBy setting up a dedicated web server and whitelisting it within SAS, you can isolate your frontend activities and enable frontend developers to deploy without having to enable access to the SAS Web Server directly.\n\n\nWeb devs can then work locally and push to that server, or work on the server directly.  One option for enabling remote (cloud) development is the open-source server edition of vscode: \nhttps://github.com/cdr/code-server\n (note - this won't work with vscodium due to non open-source components.\n\n\nTo whitelist the server in Viya, open \nEnvironment Manager -\n Configuration -\n View -\n Definitions\n and select  \nsas.commons.web.security\n.  Make sure your domain (or \n*\n) is entered under \nallowedHeaders\n, \nallowedMethods\n and \nAllowedOrigin\n.", 
            "title": "Security"
        }, 
        {
            "location": "/security/#security", 
            "text": "Deploying web apps is generally more secure than, say, Python or R, because the Javascript libraries that are included do not have access to the filesystem. The browser \"sandbox\" also prevents JS files loaded from a one domain from making calls to another domain (Cross Origin Resource Sharing /  CORS ). That said, there are still a few security considerations to keep in mind when building apps on SAS.", 
            "title": "Security"
        }, 
        {
            "location": "/security/#shared-services-account", 
            "text": "A shared system account for running web services is preferred as it can enable functionality for users that they cannot (or should not) perform themselves, eg database modifications (and for that, you should seriously consider  Data Controlller for SAS\u00ae ).  It can also avoids unix permissions issues, as created files are owned by default under the end user identity.  However - as it is a shared account, the ability to run code under this identity should be appropriately governed.  In particular, code injection must be protected against - for this reason, URL parameters are a bad idea, much better to send tables using an adapter such as  SASjs .   It is also recommended to ensure you have a secure release process, which includes code review and automated testing, to ensure the safety of your production environment.", 
            "title": "Shared Services account"
        }, 
        {
            "location": "/security/#sas-9", 
            "text": "By default your services will run on a Stored Process server under the shared credentials stored in the  SAS General Servers group  group ( sassrv  per factory settings).   It is also possible to run STPs under a Workspace Server context (where end user OS credentials match  sysuserid ).", 
            "title": "SAS 9"
        }, 
        {
            "location": "/security/#sas-viya", 
            "text": "By default, services will run on the SAS Compute server under the client identity.  Since Viya 3.5 it is also possible to run under a shared identity, and to pool the session - see  documentation .", 
            "title": "SAS Viya"
        }, 
        {
            "location": "/security/#folder-security", 
            "text": "The recommended SASjs folder structure is to group services into app subfolders, so that security can be applied at backend. The app itself can also be secured by setting permission on the parent folder. There is one more thing to consider - services can be viewed (and executed) by anyone who has the READ permission, either using the  SERVERURL/SASStoredProcess?_action=1063  url or by navigating in  SASJobExecution  on Viya. Therefore your services should be built in such a way that no damage would be caused if an end user were to accidentally 'click' on one of the services and run it.  This folder structure is enforced when using the  sasjs-cli  tool.", 
            "title": "Folder Security"
        }, 
        {
            "location": "/security/#idempotence", 
            "text": "Services should be built in such a way that they can be safely executed more than once. This is because it's possible that it WILL be run more than once (eg if the user clicks a button twice in succession).", 
            "title": "Idempotence"
        }, 
        {
            "location": "/security/#subresource-integrity", 
            "text": "An integrity hash is a checksum of a file - if just one character inside a file is changed, the checksum is totally different. This makes it a great tool for verifying that a CSS or JS file has not been modified since the checksum was generated. Content served over http (without SSL certificates) are extremely susceptible to Man in the Middle (MitM)  attacks . For this reason, it is best practice to either bundle all your dependencies inside your app, or apply SubResource Integrity (SRI) checking as per the  w3.org spec . The syntax looks like this:  script   src = https://cdn.jsdelivr.net/npm/sasjs@1.10.8/index.js \n   integrity = sha256-651B1pxDxaKb9yhXQOUSohZ+Nq9Txfc3gXlX/GSw1RQ= \n   crossorigin = anonymous / script   If your CSS or JS files are released via github, then they are automatically available with SRI checks using  JSDelivr  - for instance, to get the latest script tag for  SASjs  you can just click  here  and select \"SRI\".  If your files are elsewhere, or you'd like more control over the build, you can also generate the integrity hash yourself - here is the syntax:  cat myfile.js | openssl dgst -sha384 -binary | openssl enc -base64", 
            "title": "SubResource Integrity"
        }, 
        {
            "location": "/security/#third-party-server", 
            "text": "By setting up a dedicated web server and whitelisting it within SAS, you can isolate your frontend activities and enable frontend developers to deploy without having to enable access to the SAS Web Server directly.  Web devs can then work locally and push to that server, or work on the server directly.  One option for enabling remote (cloud) development is the open-source server edition of vscode:  https://github.com/cdr/code-server  (note - this won't work with vscodium due to non open-source components.  To whitelist the server in Viya, open  Environment Manager -  Configuration -  View -  Definitions  and select   sas.commons.web.security .  Make sure your domain (or  * ) is entered under  allowedHeaders ,  allowedMethods  and  AllowedOrigin .", 
            "title": "Third Party Server"
        }, 
        {
            "location": "/sasjs/sasjs-adapter/", 
            "text": "SASjs Adapter\n\n\nThe SASjs adapter is a JS library and a set of SAS Macros that handle the communication between the frontend app and backend SAS services.\n\n\nThere are three parts to consider:\n\n\n\n\nJS request / response\n\n\nSAS inputs / outputs\n\n\nConfiguration\n\n\n\n\nJS Request / Response\n\n\nTo install the library you can simply run \nnpm install sasjs\n or include a \nscript\n tag with a reference to our \nCDN\n.\n\n\nFull technical documentation is available \nhere\n.  The main parts are:\n\n\nInstantiation\n\n\nThe following code will instantiate an instance of the adapter:\n\n\nlet sasJs = new SASjs.default(\n  {\n    appLoc: \n/Your/SAS/Folder\n,\n    serverType:\nSAS9\n\n  }\n);\n\n\nMore on the config later.\n\n\nSAS Logon\n\n\nThe login process can be handled directly, as below, or as a callback function to a SAS request.\n\n\nsasJs.logIn(\nUSERNAME\n,\nPASSWORD\n\n  ).then((response) =\n { \n  if (response.isLoggedIn === true) {\n    console.log(\ndo stuff\n)\n  } else {\n    console.log(\ndo other stuff\n)\n  }\n}\n\n\n\n\nRequest / Response\n\n\nA simple request can be sent to SAS in the following fashion:\n\n\nsasJs.request(\n/path/to/my/service\n, dataObject)\n  .then((response) =\n {\n    // all tables are in the response object, eg:\n    console.log(response.tablewith2cols1row[0].COL1.value)\n  })\n\n\nWe supply the path to the SAS service, and a data object.  The data object can be null (for services with no input), or can contain one or more tables in the following format:\n\n\nlet dataObject={\n    \ntablewith2cols1row\n: [{\n        \ncol1\n: \nval1\n,\n        \ncol2\n: 42\n    }],\n    \ntablewith1col2rows\n: [{\n        \ncol\n: \nrow1\n\n    }, {\n        \ncol\n: \nrow2\n\n    }]\n};\n\n\n\n\nThere are optional parameters such as a config object and a callback login function as described \nhere\n.\n\n\nThe response object will contain returned tables and columns.  Table names are always lowercase, and column names uppercase.\n\n\nThe adapter will also cache the logs (if debug enabled) and even the work tables.  For performance, it is best to keep debug mode off.\n\n\nSAS Inputs / Outputs\n\n\nThe SAS side is handled by a number of macros in the \nmacro core\n library.\n\n\nThe following snippet shows the process of SAS tables arriving / leaving:\n\n/* fetch all input tables sent from frontend - they arrive as work tables */\n\n\n%webout\n(\nFETCH\n)\n\n\n\n/* some sas code */\n\n\ndata\n \nsome\n \nsas\n \ntables\n;\n\n  \nset\n \nfrom\n \njs\n;\n\n\nrun\n;\n\n\n\n%webout\n(\nOPEN\n)\n  \n/* open the JSON to be returned */\n\n\n%webout\n(\nOBJ\n,\nsome\n)\n \n/* `some` table is sent in object format */\n\n\n%webout\n(\nARR\n,\nsas\n)\n \n/* `sas` table is sent in array format, smaller filesize */\n\n\n%webout\n(\nOBJ\n,\ntables\n,\nfmt\n=\nN\n)\n \n/* unformatted (raw) data */\n\n\n%webout\n(\nOBJ\n,\ntables\n,\nlabel\n=\nnewtable\n)\n \n/* rename tables on export */\n\n\n%webout\n(\nCLOSE\n)\n \n/* close the JSON and send some extra useful variables too */\n\n\n\n\nConfiguration\n\n\nConfiguration on the client side involves passing an object on startup, which can also be passed with each request.  The main config items are:\n\n\nappLoc\n - this is the folder under which the SAS services will be created.\n\nserverType\n - either \nSAS9\n or \nSASVIYA\n\n\ndebug\n - if \ntrue\n then SAS Logs and extra debug information is returned.", 
            "title": "Adapter"
        }, 
        {
            "location": "/sasjs/sasjs-adapter/#sasjs-adapter", 
            "text": "The SASjs adapter is a JS library and a set of SAS Macros that handle the communication between the frontend app and backend SAS services.  There are three parts to consider:   JS request / response  SAS inputs / outputs  Configuration", 
            "title": "SASjs Adapter"
        }, 
        {
            "location": "/sasjs/sasjs-adapter/#js-request-response", 
            "text": "To install the library you can simply run  npm install sasjs  or include a  script  tag with a reference to our  CDN .  Full technical documentation is available  here .  The main parts are:", 
            "title": "JS Request / Response"
        }, 
        {
            "location": "/sasjs/sasjs-adapter/#instantiation", 
            "text": "The following code will instantiate an instance of the adapter:  let sasJs = new SASjs.default(\n  {\n    appLoc:  /Your/SAS/Folder ,\n    serverType: SAS9 \n  }\n); \nMore on the config later.", 
            "title": "Instantiation"
        }, 
        {
            "location": "/sasjs/sasjs-adapter/#sas-logon", 
            "text": "The login process can be handled directly, as below, or as a callback function to a SAS request.  sasJs.logIn( USERNAME , PASSWORD \n  ).then((response) =  { \n  if (response.isLoggedIn === true) {\n    console.log( do stuff )\n  } else {\n    console.log( do other stuff )\n  }\n}", 
            "title": "SAS Logon"
        }, 
        {
            "location": "/sasjs/sasjs-adapter/#request-response", 
            "text": "A simple request can be sent to SAS in the following fashion:  sasJs.request( /path/to/my/service , dataObject)\n  .then((response) =  {\n    // all tables are in the response object, eg:\n    console.log(response.tablewith2cols1row[0].COL1.value)\n  }) \nWe supply the path to the SAS service, and a data object.  The data object can be null (for services with no input), or can contain one or more tables in the following format:  let dataObject={\n     tablewith2cols1row : [{\n         col1 :  val1 ,\n         col2 : 42\n    }],\n     tablewith1col2rows : [{\n         col :  row1 \n    }, {\n         col :  row2 \n    }]\n};  There are optional parameters such as a config object and a callback login function as described  here .  The response object will contain returned tables and columns.  Table names are always lowercase, and column names uppercase.  The adapter will also cache the logs (if debug enabled) and even the work tables.  For performance, it is best to keep debug mode off.", 
            "title": "Request / Response"
        }, 
        {
            "location": "/sasjs/sasjs-adapter/#sas-inputs-outputs", 
            "text": "The SAS side is handled by a number of macros in the  macro core  library.  The following snippet shows the process of SAS tables arriving / leaving: /* fetch all input tables sent from frontend - they arrive as work tables */  %webout ( FETCH )  /* some sas code */  data   some   sas   tables ; \n   set   from   js ;  run ;  %webout ( OPEN )    /* open the JSON to be returned */  %webout ( OBJ , some )   /* `some` table is sent in object format */  %webout ( ARR , sas )   /* `sas` table is sent in array format, smaller filesize */  %webout ( OBJ , tables , fmt = N )   /* unformatted (raw) data */  %webout ( OBJ , tables , label = newtable )   /* rename tables on export */  %webout ( CLOSE )   /* close the JSON and send some extra useful variables too */", 
            "title": "SAS Inputs / Outputs"
        }, 
        {
            "location": "/sasjs/sasjs-adapter/#configuration", 
            "text": "Configuration on the client side involves passing an object on startup, which can also be passed with each request.  The main config items are:  appLoc  - this is the folder under which the SAS services will be created. serverType  - either  SAS9  or  SASVIYA  debug  - if  true  then SAS Logs and extra debug information is returned.", 
            "title": "Configuration"
        }, 
        {
            "location": "/sasjs/sasjs-cli/", 
            "text": "SASJS-CLI\n\n\nThe CLI tool fulfills 3 main purposes:\n\n\n\n\nCreation of a project repository in an 'opinionated' way\n\n\nCompilation each service, including all the dependent macros / macro variables and pre / post code\n\n\nBuild - creation of the master SAS deployment, including build macros, macro variables, and pre/post code\n\n\nDeployment - execute an array of local scripts and remote SAS programs to create your app on the SAS Server \n\n\n\n\nThere is also a feature to let you deploy your frontend as a service, bypassing the need to access the SAS Web Server.\n\n\nInstallation\n\n\nThe tool must be installed globally in order to function as a command.  Simply run:\n\n\nnpm i -g sasjs-cli\n\n\n\n\nProject Creation\n\n\nTo create a new project, run:  \nsasjs create mynewproject\n\n\nTo install in an existing project, change into that directory and run: \nsasjs create\n (without arguments).  This will create a \nsas\n folder inside the directory.\n\n\nCompilation\n\n\nFrom the root of the project, run:  \nsasjs compile\n.  This will take all of the macros in the \nservices\n folder and create equivalents in the \nsasbuild\n folder.  Each service will contain all of the dependent macros as listed under \ndependencies\n in the header, as well as the \nserviceinit.sas\n and \nserviceterm.sas\n files.\n\n\n\nIf \nstreamWeb\n is \ntrue\n then the \nindex.html\n file in your \nwebSourcePath\n is scanned and any linked JS / CSS files are also compiled into the \nstreamWebFolder\n folder.  The \nindex.html\n becomes a \nclickme\n service in your \nappLoc\n SAS folder root. \n\n\nBase64 encoding\n\n\nIf you don't have an \nindex.html\n and you just want to compile arbitrary binary content (such as images, mp3, excel files etc) as base64 services, set the location of the content in \nassetPaths\n.  All files in the specified folder(s) will be turned into web services.\n\n\nBuild\n\n\nFrom the root of the project, run: \nsasjs build\n.  This will create a deployment script that can be executed in SAS to create the backend services.  The \nappLoc\n is configured in the \n/sas/config.json\n file, along with the \nserverType\n (SAS9 or SASVIYA).  A \nbuildinit.sas\n program can be configured to run, along with specific macro variables (\ntgtBuildVars\n), according to the settings in \nsasjsconfig.json\n.\n\n\nIf you have sensitive build variables (such as an \naccess_token\n) you can set these in a \n.env\n file in your project root.  \n\n\nIf the services folder does not exist in the \nsasjsbuild\n folder, then the \nsasjs compile\n step is also executed.  The alias to run both compile and build steps is \nsasjs cb\n.\n\n\n\nViya Build Script\n\n\nThe Viya build script requires a number of variables to be prepared by an administrator.  Execute the following:\n\n\nfilename\n \nmc\n \nurl\n \nhttps://raw.githubusercontent.com/sasjs/core/main/all.sas\n;\n\n\n%inc\n \nmc\n;\n\n\n%let\n \nclient\n=\nMyClient\n;\n\n\n%let\n \nsecret\n=\nMySecret\n;\n\n\n%mv_getapptoken\n(\nclient_id\n=\nclient\n,\nclient_secret\n=\nsecret\n)\n\n\n\nThis will generate a URL in the log, which must be followed to generate a refresh code (one time step):\n\n\n%mv_getrefreshtoken\n(\nclient_id\n=\nclient\n,\nclient_secret\n=\nsecret\n,\ncode\n=\nwKDZYTEPK6\n)\n\n\n\n\n\nThe ACCESS_TOKEN and REFRESH_TOKEN are now in the log.  In future, when running \nsasjs build\n for a Viya target, the following values must be provided:\n\n\n%let\n \nclient\n=\nMyClient\n;\n\n\n%let\n \nsecret\n=\nMySecret\n;\n\n\n/* these values are long - split over multiple lines with %trim()*/\n\n\n%let\n \nACCESS_TOKEN\n=\nMyGeneratedAccessToken\n;\n \n\n%let\n \nREFRESH_TOKEN\n=\nMyGeneratedRefreshToken\n;\n \n\n\n\n\nThe above can then be securely placed in a read-protected directory (such as a home directory on the SAS server) and \n%inc\n'd.\n\n\n\n\nWarning\n\n\nSaving security tokens in project repositories, especially if they are committed to source control, is a security risk - as anyone with access can use them to make modifications on the Viya platform.  Be sure to use a secure mechanism such as the \n%inc\n approach described above, or another approved mechanism for securing these kinds of variables.\n\n\n\n\nDeploy\n\n\nThe build program generated in the previous step can be deployed in 3 ways:\n\n\n1 - MANUAL: copy paste the code into SAS Studio or Enterprise Guide and run it\n\n\n2 - SSH: build a shell script or bat file to load, and execute with a web service\n\n\n3 - API: Use the SAS APIs\n\n\nPoints 2 and 3 can be configured / executed with a single \nsasjs deploy\n or \nsasjs d\n command.  You can compile, build AND deploy using \nsasjs cbd [target]\n.  If you don't specify a target (eg sas9 or viya) then the first target in the \nsasjsconfig.json\n file is used.\n\n\nCopyPaste approach\n\n\nThe build script (named as per \nbuildOutputFileName\n) can be copy pasted into SAS Studio and executed to create the backend services.  Please note:\n\n\n\n\nYou will be running under your own identity.  If you need files created under the Web Server identity, deploy your build script using a web service.\n\n\nFor Viya, you must use SASStudioV (or ensure the client/secret/access_token are provided)\n\n\n\n\nSSH approach\n\n\nYou can SSH (rsync or scp) your build script onto the SAS Server then \n%inc\n it from a web service - the web service could be created using the code below:\n\n\nfilename\n \nmc\n \nurl\n \nhttps://raw.githubusercontent.com/sasjs/core/main/all.sas\n;\n\n\n%inc\n \nmc\n;\n\n\nfilename\n \nft15f001\n \ntemp\n;\n\n\nparmcards4\n;\n\n  \n%inc\n \n/path/to/your/sasjsdeploy.sas\n/\nsource2\n;\n\n\n;;;;\n\n\n%mp_createwebservice\n(\nname\n=\nExecutor\n,\n \ncode\n=\nft15f001\n \n,\nreplace\n=\nYES\n)\n\n\n\nThis creates the service in your HOME directory (SAS 9 or Viya).  \n\n\nYou can now create a local script (eg \nmysas9deploy.sh\n) and add it to the \ntgtDeployScripts\n array (the root is always the \nsasjs\n folder). \n\n\necho \nsasjs: uploading frontend\n\nrsync -avz /home/me/myapp/dist/* me@sasserver:/var/www/html/myapp\n\necho \nsasjs: uploading deploy program\n\nscp sasjsbuild/mysas9deploy.sas me@sasserver:/tmp/mysas9deploy.sas\n\necho \nsasjs: running Executor\n\ncurl -v -L -k  -b cookiefile -c cookiefile \n$URL\n$CREDS\n\n\n\n\n\nAPI Approach\n\n\nAny files in your \ntgtDeployScripts\n array that have a \".sas\" extension will be sent to the relevant API (9 or Viya) for execution.\n\n\nViya API deployment\n\n\nThe Viya deploy requires 3 things:  \n\n\n\n\naccess_token\n\n\nserverUrl\n\n\ncontextName\n\n\n\n\nIn order of priority, the \naccess_token\n is taken from the following locations:\n\n\n\n\ntgtDeployVars\n\n\ntgtBuildVars\n\n\nthe \n.env\n file.  This is the preferred / recommended location!\n\n\n\n\nThe \nserverUrl\n is the location of your Viya server.  The \ncontextName\n is the execution service on which your SAS code will execute.  You can get a list of available contexts by running a \nGET\n to the following endpoint:  \n/compute/contexts\n\n\nSAS 9\n\n\nFor SAS 9 deployment we integrate with SAS9API by Analytium (\nhttps://sas9api.io\n), you can contact them for a free trial copy.\n\n\nConfiguration as follows:\n\n\n  \ntgtDeployVars\n: {\n      \nserverName\n: \nSASApp\n,\n      \nrepositoryName\n: \nFoundation\n\n  },\n  \nserverUrl\n: \nhttp://SASSERVER:PORT\n,\n\n\n\n\nDemo\n\n\nA 2 minute video demonstrating how an app can be built and a deployment script created is shown below.", 
            "title": "CLI Tool"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#sasjs-cli", 
            "text": "The CLI tool fulfills 3 main purposes:   Creation of a project repository in an 'opinionated' way  Compilation each service, including all the dependent macros / macro variables and pre / post code  Build - creation of the master SAS deployment, including build macros, macro variables, and pre/post code  Deployment - execute an array of local scripts and remote SAS programs to create your app on the SAS Server    There is also a feature to let you deploy your frontend as a service, bypassing the need to access the SAS Web Server.", 
            "title": "SASJS-CLI"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#installation", 
            "text": "The tool must be installed globally in order to function as a command.  Simply run:  npm i -g sasjs-cli", 
            "title": "Installation"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#project-creation", 
            "text": "To create a new project, run:   sasjs create mynewproject  To install in an existing project, change into that directory and run:  sasjs create  (without arguments).  This will create a  sas  folder inside the directory.", 
            "title": "Project Creation"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#compilation", 
            "text": "From the root of the project, run:   sasjs compile .  This will take all of the macros in the  services  folder and create equivalents in the  sasbuild  folder.  Each service will contain all of the dependent macros as listed under  dependencies  in the header, as well as the  serviceinit.sas  and  serviceterm.sas  files.  If  streamWeb  is  true  then the  index.html  file in your  webSourcePath  is scanned and any linked JS / CSS files are also compiled into the  streamWebFolder  folder.  The  index.html  becomes a  clickme  service in your  appLoc  SAS folder root.", 
            "title": "Compilation"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#base64-encoding", 
            "text": "If you don't have an  index.html  and you just want to compile arbitrary binary content (such as images, mp3, excel files etc) as base64 services, set the location of the content in  assetPaths .  All files in the specified folder(s) will be turned into web services.", 
            "title": "Base64 encoding"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#build", 
            "text": "From the root of the project, run:  sasjs build .  This will create a deployment script that can be executed in SAS to create the backend services.  The  appLoc  is configured in the  /sas/config.json  file, along with the  serverType  (SAS9 or SASVIYA).  A  buildinit.sas  program can be configured to run, along with specific macro variables ( tgtBuildVars ), according to the settings in  sasjsconfig.json .  If you have sensitive build variables (such as an  access_token ) you can set these in a  .env  file in your project root.    If the services folder does not exist in the  sasjsbuild  folder, then the  sasjs compile  step is also executed.  The alias to run both compile and build steps is  sasjs cb .", 
            "title": "Build"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#viya-build-script", 
            "text": "The Viya build script requires a number of variables to be prepared by an administrator.  Execute the following:  filename   mc   url   https://raw.githubusercontent.com/sasjs/core/main/all.sas ;  %inc   mc ;  %let   client = MyClient ;  %let   secret = MySecret ;  %mv_getapptoken ( client_id = client , client_secret = secret )  \nThis will generate a URL in the log, which must be followed to generate a refresh code (one time step):  %mv_getrefreshtoken ( client_id = client , client_secret = secret , code = wKDZYTEPK6 )   The ACCESS_TOKEN and REFRESH_TOKEN are now in the log.  In future, when running  sasjs build  for a Viya target, the following values must be provided:  %let   client = MyClient ;  %let   secret = MySecret ;  /* these values are long - split over multiple lines with %trim()*/  %let   ACCESS_TOKEN = MyGeneratedAccessToken ;   %let   REFRESH_TOKEN = MyGeneratedRefreshToken ;    The above can then be securely placed in a read-protected directory (such as a home directory on the SAS server) and  %inc 'd.   Warning  Saving security tokens in project repositories, especially if they are committed to source control, is a security risk - as anyone with access can use them to make modifications on the Viya platform.  Be sure to use a secure mechanism such as the  %inc  approach described above, or another approved mechanism for securing these kinds of variables.", 
            "title": "Viya Build Script"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#deploy", 
            "text": "The build program generated in the previous step can be deployed in 3 ways:  1 - MANUAL: copy paste the code into SAS Studio or Enterprise Guide and run it  2 - SSH: build a shell script or bat file to load, and execute with a web service  3 - API: Use the SAS APIs  Points 2 and 3 can be configured / executed with a single  sasjs deploy  or  sasjs d  command.  You can compile, build AND deploy using  sasjs cbd [target] .  If you don't specify a target (eg sas9 or viya) then the first target in the  sasjsconfig.json  file is used.", 
            "title": "Deploy"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#copypaste-approach", 
            "text": "The build script (named as per  buildOutputFileName ) can be copy pasted into SAS Studio and executed to create the backend services.  Please note:   You will be running under your own identity.  If you need files created under the Web Server identity, deploy your build script using a web service.  For Viya, you must use SASStudioV (or ensure the client/secret/access_token are provided)", 
            "title": "CopyPaste approach"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#ssh-approach", 
            "text": "You can SSH (rsync or scp) your build script onto the SAS Server then  %inc  it from a web service - the web service could be created using the code below:  filename   mc   url   https://raw.githubusercontent.com/sasjs/core/main/all.sas ;  %inc   mc ;  filename   ft15f001   temp ;  parmcards4 ; \n   %inc   /path/to/your/sasjsdeploy.sas / source2 ;  ;;;;  %mp_createwebservice ( name = Executor ,   code = ft15f001   , replace = YES )  \nThis creates the service in your HOME directory (SAS 9 or Viya).    You can now create a local script (eg  mysas9deploy.sh ) and add it to the  tgtDeployScripts  array (the root is always the  sasjs  folder).   echo  sasjs: uploading frontend \nrsync -avz /home/me/myapp/dist/* me@sasserver:/var/www/html/myapp\n\necho  sasjs: uploading deploy program \nscp sasjsbuild/mysas9deploy.sas me@sasserver:/tmp/mysas9deploy.sas\n\necho  sasjs: running Executor \ncurl -v -L -k  -b cookiefile -c cookiefile  $URL $CREDS", 
            "title": "SSH approach"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#api-approach", 
            "text": "Any files in your  tgtDeployScripts  array that have a \".sas\" extension will be sent to the relevant API (9 or Viya) for execution.", 
            "title": "API Approach"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#viya-api-deployment", 
            "text": "The Viya deploy requires 3 things:     access_token  serverUrl  contextName   In order of priority, the  access_token  is taken from the following locations:   tgtDeployVars  tgtBuildVars  the  .env  file.  This is the preferred / recommended location!   The  serverUrl  is the location of your Viya server.  The  contextName  is the execution service on which your SAS code will execute.  You can get a list of available contexts by running a  GET  to the following endpoint:   /compute/contexts", 
            "title": "Viya API deployment"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#sas-9", 
            "text": "For SAS 9 deployment we integrate with SAS9API by Analytium ( https://sas9api.io ), you can contact them for a free trial copy.  Configuration as follows:     tgtDeployVars : {\n       serverName :  SASApp ,\n       repositoryName :  Foundation \n  },\n   serverUrl :  http://SASSERVER:PORT ,", 
            "title": "SAS 9"
        }, 
        {
            "location": "/sasjs/sasjs-cli/#demo", 
            "text": "A 2 minute video demonstrating how an app can be built and a deployment script created is shown below.", 
            "title": "Demo"
        }, 
        {
            "location": "/sasjs/macrocore/", 
            "text": "MacroCore Library\n\n\nThe MacroCore library provides routines and helpers for use in SAS side application logic and deployments.  It is divided into 5 sections:\n\n\n\n\n\n\nBASE\n - Macro functions (\nmf_*\n) and macro procedures (\nmp_*\n) that can be used in all flavours of SAS.  No XCMD is assumed.\n\n\n\n\n\n\nMETA\n - Macros (\nmm_*\n) that interface with SAS 9 metadata.  No XCMD assumed.\n\n\n\n\n\n\nMETAX\n - Metadata macros that depend on XCMD, eg those interfacing with the Batch tools.\n\n\n\n\n\n\nVIYA\n - Macros that interface with SAS Viya.  No XCMD assumed.\n\n\n\n\n\n\nCheck out the \nsource code\n and \ndocumentation\n.\n\n\nInstallation\n\n\nThe easest way to make these macros available is to just include them in your session as follows:\n\n\nfilename\n \nmc\n \nurl\n \nhttps://raw.githubusercontent.com/sasjs/core/main/all.sas\n;\n\n\n%inc\n \nmc\n;\n\n\n\n\n\nIf you don't have internet access from your SAS session, you can download the macros directly from \nhere\n and place them in your autoexec, or initialisation file.\n\n\nA further option might be to \ngit clone\n the repository, and set up sasautos, eg:\n\n\noptions insert=(sasautos=\n/your/path/macrocore/base\n));\noptions insert=(sasautos=\n/your/path/macrocore/meta\n));\n\n\n\n\nThe finaly deployment option, if you are building web apps, is Node Package Manager - simply run \nnpm install macrocore\n in your project repository.  Using \nsasjs-cli\n you can compile these macros into your web services at build time, and lock them to a particular release.", 
            "title": "MacroCore"
        }, 
        {
            "location": "/sasjs/macrocore/#macrocore-library", 
            "text": "The MacroCore library provides routines and helpers for use in SAS side application logic and deployments.  It is divided into 5 sections:    BASE  - Macro functions ( mf_* ) and macro procedures ( mp_* ) that can be used in all flavours of SAS.  No XCMD is assumed.    META  - Macros ( mm_* ) that interface with SAS 9 metadata.  No XCMD assumed.    METAX  - Metadata macros that depend on XCMD, eg those interfacing with the Batch tools.    VIYA  - Macros that interface with SAS Viya.  No XCMD assumed.    Check out the  source code  and  documentation .", 
            "title": "MacroCore Library"
        }, 
        {
            "location": "/sasjs/macrocore/#installation", 
            "text": "The easest way to make these macros available is to just include them in your session as follows:  filename   mc   url   https://raw.githubusercontent.com/sasjs/core/main/all.sas ;  %inc   mc ;   If you don't have internet access from your SAS session, you can download the macros directly from  here  and place them in your autoexec, or initialisation file.  A further option might be to  git clone  the repository, and set up sasautos, eg:  options insert=(sasautos= /your/path/macrocore/base ));\noptions insert=(sasautos= /your/path/macrocore/meta ));  The finaly deployment option, if you are building web apps, is Node Package Manager - simply run  npm install macrocore  in your project repository.  Using  sasjs-cli  you can compile these macros into your web services at build time, and lock them to a particular release.", 
            "title": "Installation"
        }, 
        {
            "location": "/backend/getstarted/", 
            "text": "Considerations\n\n\nSAS 9 vs SAS Viya\n\n\nWhen building on SAS you will be interfacing with either SAS 9 or SAS Viya.  The process for building the app will be the same with either instance, however the functionality / performance / security situation will differ as follows:\n\n\n\n\n\n\n\n\nSAS 9\n\n\nSAS VIYA\n\n\n\n\n\n\n\n\n\n\nStored Processes\n\n\nJob Execution Service\n\n\n\n\n\n\nWKS / STP Servers\n\n\nCompute Server only\n\n\n\n\n\n\nClient / System Identities\n\n\nClient / System (3.5+) Identities\n\n\n\n\n\n\nMetadata Server\n\n\nPostgres Database\n\n\n\n\n\n\n\n\nBoth server types can stream arbitrary content to the automatic _webout fileref and can make use of the _debug parameter.\n\n\nProject Folder Structure\n\n\nIt's a good idea to keep all your source code in one repository, then you can build it all together for testing.  The following folder structure is supported by \nsasjs\n:\n\n\n    MyAmazingApp/\n    |-- /src /* all web stuff */\n    |-- /sas /* all SAS stuff */\n      |-- /build\n      | |__ serviceinit.sas /* included at start of every service */\n      | |__ serviceterm.sas /* included at end of every service */\n      |-- /db\n      | |-- /LIBREF1\n      |   |__table1.ddl /* SQL only, without proc sql wrapper */\n      |   |__table1.sas /* datalines */\n      |-- /macros\n      | |__ macro1.sas /* each macro inserted into relevant services */\n      | |__ macro2.sas\n      |-- /services /* services go in subfolders for organisation \n security */\n        |-- /Admin\n        | |__ adduser.sas /* services always lowercase */\n        | |__ remuser.sas\n        |-- /Approvers\n        |  |__ approvestuff.sas\n        |-- /Common\n          |__ appinit.sas  /* always the first service to be called in an app */\n          |__ getchartdata.sas\n\n\n\n\nThe above structure is managed automatically when using \nsasjs-cli\n.  Simply run the following command to install:\n\nnpm i -g sasjs-cli\n\n\nThis will make the \nsasjs\n command available.  You can now run \nsasjs create APPNAME\n to create a project with sample folder structure like above.\n\n\nCode Injection\n\n\nCode injection can happen when an attacker sends SAS code within a macro variable, which is then resolved.  In Viya, all URL params are automatically quoted - however care is still needed when using them.\n\n\nTo minimise the risk it is best to avoid url params entirely and deal purely with datasets served by a reliable HTML5\n-\nSAS adapter.\n\n\nData Storage\n\n\nSAS Datasets (.sas7bdat files) are suitable when your data is READONLY, or being used for for single user storage (eg in WORK or SASUSER directories).  Unless you have a SPDE server, or your datasets are created in batch and READONLY, they should not be used as the 'data layer' for your app.  If your app needs to write data, it is best to use a database that supports real-time concurrent access.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/backend/getstarted/#considerations", 
            "text": "", 
            "title": "Considerations"
        }, 
        {
            "location": "/backend/getstarted/#sas-9-vs-sas-viya", 
            "text": "When building on SAS you will be interfacing with either SAS 9 or SAS Viya.  The process for building the app will be the same with either instance, however the functionality / performance / security situation will differ as follows:     SAS 9  SAS VIYA      Stored Processes  Job Execution Service    WKS / STP Servers  Compute Server only    Client / System Identities  Client / System (3.5+) Identities    Metadata Server  Postgres Database     Both server types can stream arbitrary content to the automatic _webout fileref and can make use of the _debug parameter.", 
            "title": "SAS 9 vs SAS Viya"
        }, 
        {
            "location": "/backend/getstarted/#project-folder-structure", 
            "text": "It's a good idea to keep all your source code in one repository, then you can build it all together for testing.  The following folder structure is supported by  sasjs :      MyAmazingApp/\n    |-- /src /* all web stuff */\n    |-- /sas /* all SAS stuff */\n      |-- /build\n      | |__ serviceinit.sas /* included at start of every service */\n      | |__ serviceterm.sas /* included at end of every service */\n      |-- /db\n      | |-- /LIBREF1\n      |   |__table1.ddl /* SQL only, without proc sql wrapper */\n      |   |__table1.sas /* datalines */\n      |-- /macros\n      | |__ macro1.sas /* each macro inserted into relevant services */\n      | |__ macro2.sas\n      |-- /services /* services go in subfolders for organisation   security */\n        |-- /Admin\n        | |__ adduser.sas /* services always lowercase */\n        | |__ remuser.sas\n        |-- /Approvers\n        |  |__ approvestuff.sas\n        |-- /Common\n          |__ appinit.sas  /* always the first service to be called in an app */\n          |__ getchartdata.sas  The above structure is managed automatically when using  sasjs-cli .  Simply run the following command to install: npm i -g sasjs-cli \nThis will make the  sasjs  command available.  You can now run  sasjs create APPNAME  to create a project with sample folder structure like above.", 
            "title": "Project Folder Structure"
        }, 
        {
            "location": "/backend/getstarted/#code-injection", 
            "text": "Code injection can happen when an attacker sends SAS code within a macro variable, which is then resolved.  In Viya, all URL params are automatically quoted - however care is still needed when using them.  To minimise the risk it is best to avoid url params entirely and deal purely with datasets served by a reliable HTML5 - SAS adapter.", 
            "title": "Code Injection"
        }, 
        {
            "location": "/backend/getstarted/#data-storage", 
            "text": "SAS Datasets (.sas7bdat files) are suitable when your data is READONLY, or being used for for single user storage (eg in WORK or SASUSER directories).  Unless you have a SPDE server, or your datasets are created in batch and READONLY, they should not be used as the 'data layer' for your app.  If your app needs to write data, it is best to use a database that supports real-time concurrent access.", 
            "title": "Data Storage"
        }, 
        {
            "location": "/backend/buildsas9/", 
            "text": "SAS 9 Build\n\n\nServices\n\n\nBuilding services on SAS 9 is very straightforward, as there is no app token to consider!\n\n\nThe below approach will work from 9.3 and upwards.\n\n\n*\n \ncompile\n \nmacros\n \n;\n\n\nfilename\n \nmc\n \nurl\n \nhttps://raw.githubusercontent.com/sasjs/core/main/all.sas\n;\n\n\n%inc\n \nmc\n;\n\n\n*\n \nif\n \nthe\n \nabove\n \nfails\n,\n \ndownload\n \nand\n \ncompile\n \nmanually\n;\n\n\n\n*\n \nparmcards\n \nlets\n \nus\n \nwrite\n \nto\n \na\n \ntext\n \nfile\n \nfrom\n \nopen\n \ncode\n \n;\n\n\nfilename\n \nft15f001\n \ntemp\n;\n\n\nparmcards4\n;\n\n    \n*\n \ndo\n \nsome\n \nsas\n,\n \nany\n \ninputs\n \nare\n \nnow\n \nalready\n \nWORK\n \ntables\n;\n\n    \ndata\n \nexample1\n \nexample2\n;\n\n      \nset\n \nsashelp\n.\nclass\n;\n\n    \nrun\n;\n\n    \n*\n \nsend\n \ndata\n \nback\n;\n\n    \n%webout\n(\nOPEN\n)\n\n    \n%webout\n(\nARR\n,\nexample1\n)\n \n*\n \nArray\n \nformat\n,\n \nfast\n,\n \nsuitable\n \nfor\n \nlarge\n \ntables\n \n;\n\n    \n%webout\n(\nOBJ\n,\nexample2\n)\n \n*\n \nObject\n \nformat\n,\n \neasier\n \nto\n \nwork\n \nwith\n \n;\n\n    \n%webout\n(\nCLOSE\n)\n\n\n;;;;\n\n\n%mm_createwebservice\n(\npath\n=/\nUser\n \nFolders\n/\nsysuserid\n/\nMy\n \nFolder\n\n  \n,\n \nname\n=\ntestJob\n\n  \n,\n \ncode\n=\nft15f001\n\n  \n,\n \nreplace\n=\nyes\n)", 
            "title": "SAS9"
        }, 
        {
            "location": "/backend/buildsas9/#sas-9-build", 
            "text": "", 
            "title": "SAS 9 Build"
        }, 
        {
            "location": "/backend/buildsas9/#services", 
            "text": "Building services on SAS 9 is very straightforward, as there is no app token to consider!  The below approach will work from 9.3 and upwards.  *   compile   macros   ;  filename   mc   url   https://raw.githubusercontent.com/sasjs/core/main/all.sas ;  %inc   mc ;  *   if   the   above   fails ,   download   and   compile   manually ;  *   parmcards   lets   us   write   to   a   text   file   from   open   code   ;  filename   ft15f001   temp ;  parmcards4 ; \n     *   do   some   sas ,   any   inputs   are   now   already   WORK   tables ; \n     data   example1   example2 ; \n       set   sashelp . class ; \n     run ; \n     *   send   data   back ; \n     %webout ( OPEN ) \n     %webout ( ARR , example1 )   *   Array   format ,   fast ,   suitable   for   large   tables   ; \n     %webout ( OBJ , example2 )   *   Object   format ,   easier   to   work   with   ; \n     %webout ( CLOSE )  ;;;;  %mm_createwebservice ( path =/ User   Folders / sysuserid / My   Folder \n   ,   name = testJob \n   ,   code = ft15f001 \n   ,   replace = yes )", 
            "title": "Services"
        }, 
        {
            "location": "/backend/buildviya/", 
            "text": "SAS Viya Build\n\n\nServices\n\n\nThere are three main ways to create services in Viya:\n\n\n1) Manually through the \n/SASJobExecution\n interface\n2) As part of a build process using \nsasjs-cli\n\n3) Using code in SAS Studio.  \n\n\nSAS Studio\n\n\nTo follow the below, you'll need to compile the MacroCore library into your session.  To do this, simply run the following\n\nfilename\n \nmc\n \nurl\n \nhttps://raw.githubusercontent.com/sasjs/core/main/all.sas\n;\n\n\n%inc\n \nmc\n;\n\n\n\n\nIf you are unable to run the above code, you may not have internet access on your server.  In this case, simply click this \nlink\n and copy paste the content into your SAS session, and run it.\n\n\nWe will create our service using the \n%mv_createwebservice()\n macro, which expects SAS code to be passed in as filerefs.  This will create the service and provide the necessary precode to retrieve any data that has been sent - and automatically create that data as tables in WORK.\n\n\nTo speed up this demo we are going to use a little known fileref with the alias \nft15f001\n - when combined with \nparmcards\n this allows us to write file content directly in open code, in a similar fashion to \ndatalines\n and table data.\n\n\n  \nfilename\n \nft15f001\n \ntemp\n;\n\n  \nparmcards4\n;\n\n    \n*\n \ndo\n \nsome\n \nsas\n.\n \nAll\n \ninputs\n \nare\n \nALREADY\n \ntables\n \nin\n \nWORK\n;\n\n    \ndata\n \nexample1\n \nexample2\n;\n\n      \nset\n \nsashelp\n.\nclass\n;\n\n    \nrun\n;\n\n    \n*\n \nsend\n \ndata\n \nback\n;\n\n    \n%webout\n(\nOPEN\n)\n\n    \n%webout\n(\nARR\n,\nexample1\n)\n \n*\n \nArray\n \nformat\n,\n \nfast\n,\n \ngood\n \nfor\n \nlarge\n \ntables\n;\n\n    \n%webout\n(\nOBJ\n,\nexample2\n)\n \n*\n \nObject\n \nformat\n,\n \neasier\n \nto\n \nwork\n \nwith\n \nin\n \nJS\n;\n\n    \n%webout\n(\nCLOSE\n)\n\n  \n;;;;\n\n  \n%mv_createwebservice\n(\npath\n=/\nPublic\n/\nmyapp\n/\ncommon\n/\nappInit\n,\nname\n=\ntestJob\n,\ncode\n=\nft15f001\n)\n\n\n\n\n\nYou should now see a URL in the log with a link to your service.\n\n\n\n\nTip\n\n\nYou can modify your Job Execution service by navigating to \nYOURVIYASERVER/SASJobExecution\n and finding it in the folder tree.", 
            "title": "VIYA"
        }, 
        {
            "location": "/backend/buildviya/#sas-viya-build", 
            "text": "", 
            "title": "SAS Viya Build"
        }, 
        {
            "location": "/backend/buildviya/#services", 
            "text": "There are three main ways to create services in Viya:  1) Manually through the  /SASJobExecution  interface\n2) As part of a build process using  sasjs-cli \n3) Using code in SAS Studio.", 
            "title": "Services"
        }, 
        {
            "location": "/backend/buildviya/#sas-studio", 
            "text": "To follow the below, you'll need to compile the MacroCore library into your session.  To do this, simply run the following filename   mc   url   https://raw.githubusercontent.com/sasjs/core/main/all.sas ;  %inc   mc ;   If you are unable to run the above code, you may not have internet access on your server.  In this case, simply click this  link  and copy paste the content into your SAS session, and run it.  We will create our service using the  %mv_createwebservice()  macro, which expects SAS code to be passed in as filerefs.  This will create the service and provide the necessary precode to retrieve any data that has been sent - and automatically create that data as tables in WORK.  To speed up this demo we are going to use a little known fileref with the alias  ft15f001  - when combined with  parmcards  this allows us to write file content directly in open code, in a similar fashion to  datalines  and table data.     filename   ft15f001   temp ; \n   parmcards4 ; \n     *   do   some   sas .   All   inputs   are   ALREADY   tables   in   WORK ; \n     data   example1   example2 ; \n       set   sashelp . class ; \n     run ; \n     *   send   data   back ; \n     %webout ( OPEN ) \n     %webout ( ARR , example1 )   *   Array   format ,   fast ,   good   for   large   tables ; \n     %webout ( OBJ , example2 )   *   Object   format ,   easier   to   work   with   in   JS ; \n     %webout ( CLOSE ) \n   ;;;; \n   %mv_createwebservice ( path =/ Public / myapp / common / appInit , name = testJob , code = ft15f001 )   You should now see a URL in the log with a link to your service.   Tip  You can modify your Job Execution service by navigating to  YOURVIYASERVER/SASJobExecution  and finding it in the folder tree.", 
            "title": "SAS Studio"
        }, 
        {
            "location": "/frontend/getstarted/", 
            "text": "Frontend Web\n\n\nHosting\n\n\nTo launch a web site, you need access to a server!  Your options are:\n\n\n1 - localhost (launch on your own PC)\n\n\n2 - SAS Server\n\n\n3 - third party server\n\n\nWorking Locally\n\n\nWorking locally (\nlocalhost\n) means that you will be starting up a server on your own machine, and using that to connect to SAS.  This is convenient, but will require bypassing some security settings by enabling \ncors\n in your browser.\n\n\nThe \nsasjsConfig\n will also need to be updated with the \nserverUrl\n so that SASjs knows where the SAS server is located.\n\n\nSAS Server\n\n\nSee \ndeployment\n.\n\n\nAnother option is webdav: http://www.re.be/webdav_sync/index.xhtml\n\n\nThird Party Server\n\n\nTo work on a third party server, if on a different domain, it will normally need to be whitelisted from SAS.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/frontend/getstarted/#frontend-web", 
            "text": "", 
            "title": "Frontend Web"
        }, 
        {
            "location": "/frontend/getstarted/#hosting", 
            "text": "To launch a web site, you need access to a server!  Your options are:  1 - localhost (launch on your own PC)  2 - SAS Server  3 - third party server", 
            "title": "Hosting"
        }, 
        {
            "location": "/frontend/getstarted/#working-locally", 
            "text": "Working locally ( localhost ) means that you will be starting up a server on your own machine, and using that to connect to SAS.  This is convenient, but will require bypassing some security settings by enabling  cors  in your browser.  The  sasjsConfig  will also need to be updated with the  serverUrl  so that SASjs knows where the SAS server is located.", 
            "title": "Working Locally"
        }, 
        {
            "location": "/frontend/getstarted/#sas-server", 
            "text": "See  deployment .  Another option is webdav: http://www.re.be/webdav_sync/index.xhtml", 
            "title": "SAS Server"
        }, 
        {
            "location": "/frontend/getstarted/#third-party-server", 
            "text": "To work on a third party server, if on a different domain, it will normally need to be whitelisted from SAS.", 
            "title": "Third Party Server"
        }, 
        {
            "location": "/frontend/deployment/", 
            "text": "Deploy\n\n\nDeployment is the process of taking the app you have built, and putting it somewhere that others can use it!  For Single Page Web Apps you are highly recommended to upload them to the static content area of the SAS web server.  This avoids the need to configure \nserverUrl\n and for administrators to whitelist any additional servers.\n\n\nSAS9 Deploy\n\n\nThe standard location of the static content area on the SAS9 web server is \n!SASCONFIG/LevX/Web/WebServer/htdocs\n.\n\n\nViya Deploy\n\n\nThe standard location of the static content area on the Viya web server is \n/var/www/html\n.\n\n\nIf this isn't right you can take the following advice courtesy of Kurt Bremser in this communities \nthread\n:\n\n\nCheck if httpd uses a special config file (display the command line with ps -f).\n\nIf not, simply search for httpd.conf. Within that, you find the location of DocumentRoot.", 
            "title": "Deployment"
        }, 
        {
            "location": "/frontend/deployment/#deploy", 
            "text": "Deployment is the process of taking the app you have built, and putting it somewhere that others can use it!  For Single Page Web Apps you are highly recommended to upload them to the static content area of the SAS web server.  This avoids the need to configure  serverUrl  and for administrators to whitelist any additional servers.", 
            "title": "Deploy"
        }, 
        {
            "location": "/frontend/deployment/#sas9-deploy", 
            "text": "The standard location of the static content area on the SAS9 web server is  !SASCONFIG/LevX/Web/WebServer/htdocs .", 
            "title": "SAS9 Deploy"
        }, 
        {
            "location": "/frontend/deployment/#viya-deploy", 
            "text": "The standard location of the static content area on the Viya web server is  /var/www/html .  If this isn't right you can take the following advice courtesy of Kurt Bremser in this communities  thread :  Check if httpd uses a special config file (display the command line with ps -f).\n\nIf not, simply search for httpd.conf. Within that, you find the location of DocumentRoot.", 
            "title": "Viya Deploy"
        }, 
        {
            "location": "/frontend/cors/", 
            "text": "CORS\n\n\nCross Origin Resource Sharing is a feature that is disabled by default in most browsers to present cross site scripting attacks.  In our case, as we are working locally, we need to enable it (disable the security policy that prevents it) in order to connect to SAS on a different domain.\n\n\n\n\n\n\n\n\nOS\n\n\nBrowser\n\n\nLaunch Command\n\n\n\n\n\n\n\n\n\n\nMac\n\n\nChrome\n\n\nopen -n -a Google\\ Chrome --args --disable-web-security --user-data-dir=/tmp/chrome\n\n\n\n\n\n\nLinux\n\n\nChrome\n\n\ngoogle-chrome --disable-web-security --user-data-dir=\"/tmp/chrome\"\n\n\n\n\n\n\nWindows\n\n\nChrome\n\n\n\"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\" --disable-web-security --disable-gpu --user-data-dir=C:\\Temp\n\n\n\n\n\n\n\n\nIt does not seem to be possible to enable CORS in modern Firefox browsers.\n\n\nYou will know if you are successful if you see a \nYou are using an unsupported command-line flag: --disable-web-security. Stability and security will suffer.\n message.", 
            "title": "CORS"
        }, 
        {
            "location": "/frontend/cors/#cors", 
            "text": "Cross Origin Resource Sharing is a feature that is disabled by default in most browsers to present cross site scripting attacks.  In our case, as we are working locally, we need to enable it (disable the security policy that prevents it) in order to connect to SAS on a different domain.     OS  Browser  Launch Command      Mac  Chrome  open -n -a Google\\ Chrome --args --disable-web-security --user-data-dir=/tmp/chrome    Linux  Chrome  google-chrome --disable-web-security --user-data-dir=\"/tmp/chrome\"    Windows  Chrome  \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\" --disable-web-security --disable-gpu --user-data-dir=C:\\Temp     It does not seem to be possible to enable CORS in modern Firefox browsers.  You will know if you are successful if you see a  You are using an unsupported command-line flag: --disable-web-security. Stability and security will suffer.  message.", 
            "title": "CORS"
        }, 
        {
            "location": "/testing/", 
            "text": "Testing\n\n\nOur favourite tool for testing is Cypress - it's what we use for SASjs and it's user friendly and fully featured.  If you have chrome it will even launch with \nCORS\n disabled for seamless API testing.\n\n\nTo see it in action, clone the SASjs site, add your SAS details in the [cypress.json(https://github.com/macropeople/sasjs/blob/development/cypress.json) file, \nnpm install\n and \nnpm run cypress\n.\n\n\nBrowsers\n\n\nMost likely you will only need to test you applications against a very limited set of browsers (the ones your company uses, which typically inludes IE).\n\n\nFor testing a wider set of browsers, the following tools are useful\n\n\n\n\nBrowserstack (paid)\n\n\nhttps://ftp.mozilla.org/pub/firefox/releases/  (previous versions of FF)", 
            "title": "Testing"
        }, 
        {
            "location": "/testing/#testing", 
            "text": "Our favourite tool for testing is Cypress - it's what we use for SASjs and it's user friendly and fully featured.  If you have chrome it will even launch with  CORS  disabled for seamless API testing.  To see it in action, clone the SASjs site, add your SAS details in the [cypress.json(https://github.com/macropeople/sasjs/blob/development/cypress.json) file,  npm install  and  npm run cypress .", 
            "title": "Testing"
        }, 
        {
            "location": "/testing/#browsers", 
            "text": "Most likely you will only need to test you applications against a very limited set of browsers (the ones your company uses, which typically inludes IE).  For testing a wider set of browsers, the following tools are useful   Browserstack (paid)  https://ftp.mozilla.org/pub/firefox/releases/  (previous versions of FF)", 
            "title": "Browsers"
        }, 
        {
            "location": "/documentation/", 
            "text": "Documentation\n\n\nIt's said that quality of software is measured by the quality of it's documentation!\n\n\nGuides\n\n\nAs a minimum, the following guides should be produced for each app:\n\n\n\n\nUser Guide\n\n\nConfiguration Guide\n\n\nDeployment Guide\n\n\nDeveloper Guide\n\n\n\n\nBuilding Documentation\n\n\nWhilst the concept of \"word documents on sharepoint sites\" is still etched into the skulls of many, there are alternatives available if your firewalls allow.  Whilst proprietary office formats and rich text editors are user friendly, they don't fit easily and transparently into source control and continuous integration workflows.\n\n\nThe primary Text Based markup options are MarkDown (md) and reStructuredText (rst).  Markdown is easier to learn, whilst RST format is more flexible (can generate PDFs and also provide documentation within code files).\n\n\nREADME\n\n\nSuitable for small projects, all four guides could be added to a single README file in the root of your repo.  Using a tool such as \nmarkdown-to-html\n you can even convert your README into a nicely formatted HTML page as part of your build process.\n\n\nmarkdown \n$MYPROJECT/README.md\n \n \n$BUILDLOC/deploy/README.html\n\n\n\n\n\n\nMkDocs\n\n\nSuitable for medium / large projects, this is a great tool for generating a static HTML site where each page can be written in MarkDown.\n\n\nThe Data Controller for SAS\u00ae \ndocumentation\n is built in this way .\n\n\nDoxyGen\n\n\nDoxyGen\n is a commandline tool that can generate a number of output formats, similar to Sphinx.  More suitable for documenting code, than generating standalone docs (although it can do that also).\n\n\nThe \nMacro Core\n library is documented this way.\n\n\nDetails\n\n\nThis section is for explaining the code, with examples.  Indent by 4 spaces to format content as code.  The following comment style will allow code to be copy pasted without ending the header comment:\n\n\n/**\n\n\n  @details this is my detailed explanation.\n\n\n  This part is indented 2 spaces.\n\n\n\n      %* this is a SAS comment, note the style - avoids the header being closed;\n\n\n      %* it is indented 6 spaces (4 spaces from previous non code line);\n\n\n**/\n\n\n\n\n\nSphinx\n\n\nPrimarily used for writing in \nrst\n format, \nsphinx\n is a very powerful documentation builder, built in python and used for all the official python documentation.  The founder of this language went on to launch \nreadthedocs.org\n a hosting platform for Sphinx-built sites.\n\n\nSome useful resources:\n\n\n\n\nGetting started \nvideo\n\n\nOnline RST renderer: \nhttp://rst.ninjs.org\n\n\nRST Table \ngenerator\n\n\nCheatsheet: \nhttps://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html\n\n\n\n\nTypeDoc\n\n\nThe good thing about using typescript to build your frontend is that it can auto-generate a lot of documentation as types etc can be inferred from the syntax.  The SASjs library is documented this way - \nadapter.sasjs.io\n.\n\n\nMore info available \nhere\n.", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#documentation", 
            "text": "It's said that quality of software is measured by the quality of it's documentation!", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#guides", 
            "text": "As a minimum, the following guides should be produced for each app:   User Guide  Configuration Guide  Deployment Guide  Developer Guide", 
            "title": "Guides"
        }, 
        {
            "location": "/documentation/#building-documentation", 
            "text": "Whilst the concept of \"word documents on sharepoint sites\" is still etched into the skulls of many, there are alternatives available if your firewalls allow.  Whilst proprietary office formats and rich text editors are user friendly, they don't fit easily and transparently into source control and continuous integration workflows.  The primary Text Based markup options are MarkDown (md) and reStructuredText (rst).  Markdown is easier to learn, whilst RST format is more flexible (can generate PDFs and also provide documentation within code files).", 
            "title": "Building Documentation"
        }, 
        {
            "location": "/documentation/#readme", 
            "text": "Suitable for small projects, all four guides could be added to a single README file in the root of your repo.  Using a tool such as  markdown-to-html  you can even convert your README into a nicely formatted HTML page as part of your build process.  markdown  $MYPROJECT/README.md     $BUILDLOC/deploy/README.html", 
            "title": "README"
        }, 
        {
            "location": "/documentation/#mkdocs", 
            "text": "Suitable for medium / large projects, this is a great tool for generating a static HTML site where each page can be written in MarkDown.  The Data Controller for SAS\u00ae  documentation  is built in this way .", 
            "title": "MkDocs"
        }, 
        {
            "location": "/documentation/#doxygen", 
            "text": "DoxyGen  is a commandline tool that can generate a number of output formats, similar to Sphinx.  More suitable for documenting code, than generating standalone docs (although it can do that also).  The  Macro Core  library is documented this way.", 
            "title": "DoxyGen"
        }, 
        {
            "location": "/documentation/#details", 
            "text": "This section is for explaining the code, with examples.  Indent by 4 spaces to format content as code.  The following comment style will allow code to be copy pasted without ending the header comment:  /**    @details this is my detailed explanation.    This part is indented 2 spaces.        %* this is a SAS comment, note the style - avoids the header being closed;        %* it is indented 6 spaces (4 spaces from previous non code line);  **/", 
            "title": "Details"
        }, 
        {
            "location": "/documentation/#sphinx", 
            "text": "Primarily used for writing in  rst  format,  sphinx  is a very powerful documentation builder, built in python and used for all the official python documentation.  The founder of this language went on to launch  readthedocs.org  a hosting platform for Sphinx-built sites.  Some useful resources:   Getting started  video  Online RST renderer:  http://rst.ninjs.org  RST Table  generator  Cheatsheet:  https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html", 
            "title": "Sphinx"
        }, 
        {
            "location": "/documentation/#typedoc", 
            "text": "The good thing about using typescript to build your frontend is that it can auto-generate a lot of documentation as types etc can be inferred from the syntax.  The SASjs library is documented this way -  adapter.sasjs.io .  More info available  here .", 
            "title": "TypeDoc"
        }, 
        {
            "location": "/guides/images/", 
            "text": "Images\n\n\nIf you are hosting your web app on a web server (like you should) then there is really not much to consider regarding images, other than for you to minimise file sizes to improve app load times.  Images are often cached so subsequent loads are less of an issue.\n\n\nIf you are streaming HTML from SAS though, images are more of a challenge.  This is where \nbase64\n encoding comes in.  Essentially this technique lets you save an image as a long string, eg:\n\n\nThere are many online services that will convert an image into a Base64 string for you, eg:  \nhttps://base64.guru/converter/encode/image\n.\n\n\nWhen streaming through _webout, be aware that you are likely to hit the line  length restriction.  To avoid this, set a large value for \nlrecl\n and ensure that your data is streamed byte by byte.\n\n\nIf you use the \nsasjs-cli\n tool, this part will be handled for you.", 
            "title": "Images"
        }, 
        {
            "location": "/guides/images/#images", 
            "text": "If you are hosting your web app on a web server (like you should) then there is really not much to consider regarding images, other than for you to minimise file sizes to improve app load times.  Images are often cached so subsequent loads are less of an issue.  If you are streaming HTML from SAS though, images are more of a challenge.  This is where  base64  encoding comes in.  Essentially this technique lets you save an image as a long string, eg:  There are many online services that will convert an image into a Base64 string for you, eg:   https://base64.guru/converter/encode/image .  When streaming through _webout, be aware that you are likely to hit the line  length restriction.  To avoid this, set a large value for  lrecl  and ensure that your data is streamed byte by byte.  If you use the  sasjs-cli  tool, this part will be handled for you.", 
            "title": "Images"
        }, 
        {
            "location": "/guides/state/", 
            "text": "State Management\n\n\nBest practice for building web apps is for each service to be 'stateless'. If your logic depends on state, then that state can be managed in a number of ways:\n\n\n\n\n\n\n\nWarning\n\n\nDo not use SAS 9 sessions! They can unbalance your load balancer.\nDo not use url params! They can cause code injection.\n\n\n\n\nCookies\n\n\nSmall amounts of data can be kept on the user browser in the form of cookies. These are accessed in SAS by means of the \n_htcook\n macro variable, accessed as follows:\n\n\nproc sql noprint;\nselect * from dictionary.macros where name=\u201d_HTCOOK\u201d ;", 
            "title": "State Management"
        }, 
        {
            "location": "/guides/state/#state-management", 
            "text": "Best practice for building web apps is for each service to be 'stateless'. If your logic depends on state, then that state can be managed in a number of ways:    Warning  Do not use SAS 9 sessions! They can unbalance your load balancer.\nDo not use url params! They can cause code injection.", 
            "title": "State Management"
        }, 
        {
            "location": "/guides/state/#cookies", 
            "text": "Small amounts of data can be kept on the user browser in the form of cookies. These are accessed in SAS by means of the  _htcook  macro variable, accessed as follows:  proc sql noprint;\nselect * from dictionary.macros where name=\u201d_HTCOOK\u201d ;", 
            "title": "Cookies"
        }, 
        {
            "location": "/windows/", 
            "text": "Windows\n\n\nThe reality for many SAS developers is that they are working in locked down windows machines without admin rights.  This causes problems when trying to install basic tooling such as GIT or NPM.\n\n\nThe correct approach in such circumstances is to simply make a request for these apps to be installed, so that you can be enabled to create amazing, supportable, maintainable web applications for your end users.\n\n\nThe alternative is to use portable versions that do not require admin privileges to execute.\n\n\nVSCode\n\n\nVSCode is a powerful editor that includes a commandline that will run both CMD and POWERSHELL.  The portable version is here:  \nhttps://github.com/garethflowers/vscode-portable\n\n\nNPM\n\n\nNode Package Manager is an essential piece of kit, as it allows the dependencies of your project to be installed in a reproduceable manner.  A guide to installing NPM without admin rights is available here:  \nhttps://theshravan.net/blog/how-to-use-node-and-npm-without-installation-or-admin-rights/\n\n\nGIT\n\n\nA portable version of GIT can be installed directly from github here: \nhttps://github.com/git-for-windows/git/releases\n.\n\n\nDownload the portable \n.exe\n file from the releases page and unzip it to a location in your filesystem.\n\n\nInside the unzipped folder will be a folder called \ncmd\n. This contains the \ngit.exe\n file.  There is also a \nusr/bin\n folder - which contains \nssh-keygen.exe\n.\n\n\nAdd both of these locations to the PATH environment variable for your windows account, as per below.\n\n\n\n\nBe sure to hit OK twice for the change to be saved!  You can now open a \nnew\n shell window and create your SSH key using the \nssh-keygen\n command.\n\n\nCMDer\n\n\nThis comes prebundled with GIT, allows a number of unix commands, and enables a remote (cloud) config, worth checking out:  https://cmder.net/", 
            "title": "Windows"
        }, 
        {
            "location": "/windows/#windows", 
            "text": "The reality for many SAS developers is that they are working in locked down windows machines without admin rights.  This causes problems when trying to install basic tooling such as GIT or NPM.  The correct approach in such circumstances is to simply make a request for these apps to be installed, so that you can be enabled to create amazing, supportable, maintainable web applications for your end users.  The alternative is to use portable versions that do not require admin privileges to execute.", 
            "title": "Windows"
        }, 
        {
            "location": "/windows/#vscode", 
            "text": "VSCode is a powerful editor that includes a commandline that will run both CMD and POWERSHELL.  The portable version is here:   https://github.com/garethflowers/vscode-portable", 
            "title": "VSCode"
        }, 
        {
            "location": "/windows/#npm", 
            "text": "Node Package Manager is an essential piece of kit, as it allows the dependencies of your project to be installed in a reproduceable manner.  A guide to installing NPM without admin rights is available here:   https://theshravan.net/blog/how-to-use-node-and-npm-without-installation-or-admin-rights/", 
            "title": "NPM"
        }, 
        {
            "location": "/windows/#git", 
            "text": "A portable version of GIT can be installed directly from github here:  https://github.com/git-for-windows/git/releases .  Download the portable  .exe  file from the releases page and unzip it to a location in your filesystem.  Inside the unzipped folder will be a folder called  cmd . This contains the  git.exe  file.  There is also a  usr/bin  folder - which contains  ssh-keygen.exe .  Add both of these locations to the PATH environment variable for your windows account, as per below.   Be sure to hit OK twice for the change to be saved!  You can now open a  new  shell window and create your SSH key using the  ssh-keygen  command.", 
            "title": "GIT"
        }, 
        {
            "location": "/windows/#cmder", 
            "text": "This comes prebundled with GIT, allows a number of unix commands, and enables a remote (cloud) config, worth checking out:  https://cmder.net/", 
            "title": "CMDer"
        }, 
        {
            "location": "/guides/sas9/", 
            "text": "SAS9\n\n\nWhere is my Server?\n\n\nIf you're on a new site, you don't always know where your SAS Server is!\n\n\nThere are two options to find out programmatically:\n\n\nMETADATA_GETURI\n\n\nProbably the quickest and easiest:\n\n\ndata _null_;\n  length url $128.;\n  call missing(url);\n  rc = METADATA_GETURI(\nStored Process Web App\n,url);\n  put url=;\nrun;\n\n\n\n\nmm_getwebappsrvprops\n\n\nThis \nmacro\n gets a bunch of properties relating to web servers, however it's possible that access may be restricted, depending on the metadata permissions at your site.\n\n\n%mm_getwebappsrvprops\n(\noutds\n=\n \nsome_ds\n)\n\n\ndata\n \n_null_\n;\n\n    \nset\n \nsome_ds\n(\nwhere\n=\n(\nname\n=\nwebappsrv\n.\nserver\n.\nurl\n));\n\n    \nput\n \nvalue\n=\n;\n\n\nrun\n;\n\n\n\n\n\nLoad Balancing\n\n\nThe SAS Load Balancer comes with 3 parallel (multibridge) connections by default.  This must be increased!  A good minimum is 5-10 per CPU core.", 
            "title": "SAS9"
        }, 
        {
            "location": "/guides/sas9/#sas9", 
            "text": "", 
            "title": "SAS9"
        }, 
        {
            "location": "/guides/sas9/#where-is-my-server", 
            "text": "If you're on a new site, you don't always know where your SAS Server is!  There are two options to find out programmatically:", 
            "title": "Where is my Server?"
        }, 
        {
            "location": "/guides/sas9/#metadata_geturi", 
            "text": "Probably the quickest and easiest:  data _null_;\n  length url $128.;\n  call missing(url);\n  rc = METADATA_GETURI( Stored Process Web App ,url);\n  put url=;\nrun;", 
            "title": "METADATA_GETURI"
        }, 
        {
            "location": "/guides/sas9/#mm_getwebappsrvprops", 
            "text": "This  macro  gets a bunch of properties relating to web servers, however it's possible that access may be restricted, depending on the metadata permissions at your site.  %mm_getwebappsrvprops ( outds =   some_ds )  data   _null_ ; \n     set   some_ds ( where = ( name = webappsrv . server . url )); \n     put   value = ;  run ;", 
            "title": "mm_getwebappsrvprops"
        }, 
        {
            "location": "/guides/sas9/#load-balancing", 
            "text": "The SAS Load Balancer comes with 3 parallel (multibridge) connections by default.  This must be increased!  A good minimum is 5-10 per CPU core.", 
            "title": "Load Balancing"
        }, 
        {
            "location": "/guides/viya/", 
            "text": "Viya\n\n\nSAS Viya is the new kid on the block and the future for the SAS platform. It has a blazingly fast in-memory, scalable architecture and is built with developers in mind.\n\n\nHere are some relevant tips \n tricks to help from an app-development perspective.\n\n\nServer Restart\n\n\nThis is necessary after configuring settings such as whitelisting.\nLog onto the box as an admin and execute the following commands:\n\n\nsudo /etc/init.d/sas-viya-all-services stop\nsudo /etc/init.d/sas-viya-all-services start\n\n\n\n\nShared Account and Server re-use\n\n\nServer pooling and the use of a shared OS account are both possible from Viya 3.5 - the documentation is \nhere\n (and a communities article are availabel \nhere\n and \nhere\n)\n\n\nCompute setup\n\n\nLog onto the box and navigate to \n/opt/sas/viya/home/bin\n.  To create your profile (if you haven't done this already) run \n./sas-admin profile init\n.\n\n\nThen, \n./sas-admin auth login\n to authenticate.  Next, \n./sas-admin compute credentials create\n and use the credentials you would like the new compute context to use (the equivalent of the SAS 9 \nsassrv\n account).\n\n\nNext up, log onto SASEnvironment Manager (as admin user), Contexts, View Compute Contexts.  You can either create a new profile, or modify the existing \"SAS Job Execution compute context\".\n\n\nScroll down and add the following attribute / value pairs:\n\n\n\n\n\n\n\n\nStatus\n\n\nAttribute\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nMandatory\n\n\nrunServerAs\n\n\nthe user id we used in the \n./sas-admin compute credentials create\n  step above\n\n\n\n\n\n\nMandatory\n\n\nreuseServerProcesses\n\n\ntrue\n\n\n\n\n\n\nOptional\n\n\nserverInactiveTimeout\n\n\nTime in seconds before the server times out.  Will otherwise time out when there are no active sessions.  Default is \n600\n (10 mins).  We recommend \n1800\n or longer.\n\n\n\n\n\n\nOptional\n\n\nallowXCMD\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nOptional\n\n\nunsafeJobCharacters\n\n\nContains the characters that the compute session should remove from any variable that is provided to a job for execution. By default, the following characters are removed: \n (ampersand), \u201d (double quotation mark), ; (semicolon), \u2019 (single quotation mark), and % (percent sign). If set to \"\" the feature is disabled.\n\n\n\n\n\n\n\n\nWith this feature enabled, your end user ID will be \nSYS_COMPUTE_SESSION_OWNER\n instead of \nSYSUSERID\n.\n\n\nNote - a server restart is not required.\n\n\nCookies\n\n\nAs described in this \nusage note\n, since the Google Chrome 80 update in February 2020, you may notice the following error in your log:\n\n\n^ The request is invalid. This may indicate that the request was not originated by you, or the request time limit was reached. Please retry your action.", 
            "title": "Viya"
        }, 
        {
            "location": "/guides/viya/#viya", 
            "text": "SAS Viya is the new kid on the block and the future for the SAS platform. It has a blazingly fast in-memory, scalable architecture and is built with developers in mind.  Here are some relevant tips   tricks to help from an app-development perspective.", 
            "title": "Viya"
        }, 
        {
            "location": "/guides/viya/#server-restart", 
            "text": "This is necessary after configuring settings such as whitelisting.\nLog onto the box as an admin and execute the following commands:  sudo /etc/init.d/sas-viya-all-services stop\nsudo /etc/init.d/sas-viya-all-services start", 
            "title": "Server Restart"
        }, 
        {
            "location": "/guides/viya/#shared-account-and-server-re-use", 
            "text": "Server pooling and the use of a shared OS account are both possible from Viya 3.5 - the documentation is  here  (and a communities article are availabel  here  and  here )", 
            "title": "Shared Account and Server re-use"
        }, 
        {
            "location": "/guides/viya/#compute-setup", 
            "text": "Log onto the box and navigate to  /opt/sas/viya/home/bin .  To create your profile (if you haven't done this already) run  ./sas-admin profile init .  Then,  ./sas-admin auth login  to authenticate.  Next,  ./sas-admin compute credentials create  and use the credentials you would like the new compute context to use (the equivalent of the SAS 9  sassrv  account).  Next up, log onto SASEnvironment Manager (as admin user), Contexts, View Compute Contexts.  You can either create a new profile, or modify the existing \"SAS Job Execution compute context\".  Scroll down and add the following attribute / value pairs:     Status  Attribute  Value      Mandatory  runServerAs  the user id we used in the  ./sas-admin compute credentials create   step above    Mandatory  reuseServerProcesses  true    Optional  serverInactiveTimeout  Time in seconds before the server times out.  Will otherwise time out when there are no active sessions.  Default is  600  (10 mins).  We recommend  1800  or longer.    Optional  allowXCMD  true  or  false    Optional  unsafeJobCharacters  Contains the characters that the compute session should remove from any variable that is provided to a job for execution. By default, the following characters are removed:   (ampersand), \u201d (double quotation mark), ; (semicolon), \u2019 (single quotation mark), and % (percent sign). If set to \"\" the feature is disabled.     With this feature enabled, your end user ID will be  SYS_COMPUTE_SESSION_OWNER  instead of  SYSUSERID .  Note - a server restart is not required.", 
            "title": "Compute setup"
        }, 
        {
            "location": "/guides/viya/#cookies", 
            "text": "As described in this  usage note , since the Google Chrome 80 update in February 2020, you may notice the following error in your log:  ^ The request is invalid. This may indicate that the request was not originated by you, or the request time limit was reached. Please retry your action.", 
            "title": "Cookies"
        }, 
        {
            "location": "/training/resources/", 
            "text": "Resources\n\n\nWebsites\n\n\n\n\nSASjs \nadapter\n (if you like it, star it!)\n\n\nSASJS-CLI \ncommandline tool\n\n\nMacro Core github \nLibrary\n\n\nMacro Core \ndocumentation\n\n\nREACT \nseed app\n\n\nAngular \nseed app\n\n\nMinimal \nseed app\n\n\nSlides to \nBuild A HTML5 App Using SAS\n\n\n\n\nSasensei SAS App Quiz\n\n\n\n\n\n\nData Controller \ndocumentation\n\n\n\n\n\n\nVideos\n\n\nBuild a HTML5 Web App Using SAS\n\n\nSGF2020 Virtual Presentation\n\n\n\n\n\nBuild a React Web App on SAS Viya in under 5 minutes\n\n\nClone, install, configure, build, deploy frontend, generate backend!\n\n\n\nUse the SASJS-CLI to create a backend repository\n\n\nThe CLI tool enables your SAS backend to live alongside your frontend in a GIT repository - and for your SAS services to be compiled, built and deployed in a single command.\n\n\n\n\n\nDeploying and Using the Viya Token Generator\n\n\nOn Viya you need a client, secret and access_token to autodeploy your backend. This \napp\n makes it easy.\n\n\n\n\n\nSAS Streamed SAS Rap\n\n\nStreaming an MP3 file from a SAS Web Service.  A to the mfn K!\n\n\n\n\n\nCompile/Build/Deploy a HTML5 Game on SAS\n\n\nUse the Viya REST APIs or \nsas9api\n to autodeploy your app to the backend.  Github repo \nhere", 
            "title": "Resources"
        }, 
        {
            "location": "/training/resources/#resources", 
            "text": "", 
            "title": "Resources"
        }, 
        {
            "location": "/training/resources/#websites", 
            "text": "SASjs  adapter  (if you like it, star it!)  SASJS-CLI  commandline tool  Macro Core github  Library  Macro Core  documentation  REACT  seed app  Angular  seed app  Minimal  seed app  Slides to  Build A HTML5 App Using SAS   Sasensei SAS App Quiz    Data Controller  documentation", 
            "title": "Websites"
        }, 
        {
            "location": "/training/resources/#videos", 
            "text": "", 
            "title": "Videos"
        }, 
        {
            "location": "/training/resources/#build-a-html5-web-app-using-sas", 
            "text": "SGF2020 Virtual Presentation", 
            "title": "Build a HTML5 Web App Using SAS"
        }, 
        {
            "location": "/training/resources/#build-a-react-web-app-on-sas-viya-in-under-5-minutes", 
            "text": "Clone, install, configure, build, deploy frontend, generate backend!", 
            "title": "Build a React Web App on SAS Viya in under 5 minutes"
        }, 
        {
            "location": "/training/resources/#use-the-sasjs-cli-to-create-a-backend-repository", 
            "text": "The CLI tool enables your SAS backend to live alongside your frontend in a GIT repository - and for your SAS services to be compiled, built and deployed in a single command.", 
            "title": "Use the SASJS-CLI to create a backend repository"
        }, 
        {
            "location": "/training/resources/#deploying-and-using-the-viya-token-generator", 
            "text": "On Viya you need a client, secret and access_token to autodeploy your backend. This  app  makes it easy.", 
            "title": "Deploying and Using the Viya Token Generator"
        }, 
        {
            "location": "/training/resources/#sas-streamed-sas-rap", 
            "text": "Streaming an MP3 file from a SAS Web Service.  A to the mfn K!", 
            "title": "SAS Streamed SAS Rap"
        }, 
        {
            "location": "/training/resources/#compilebuilddeploy-a-html5-game-on-sas", 
            "text": "Use the Viya REST APIs or  sas9api  to autodeploy your app to the backend.  Github repo  here", 
            "title": "Compile/Build/Deploy a HTML5 Game on SAS"
        }, 
        {
            "location": "/training/workshops/", 
            "text": "Workshops\n\n\nAre you looking to build the capability to deploy fresh and inspiring new interfaces into the SAS Platform? Get yourself off on the right foot with a live training package, review the best practices, pitfalls to avoid, and learn all the tips, tooling \n techniques for rapid delivery and continuous deployment of SASjs Web Apps.\n\n\nSession Types\n\n\nTraining is available either remotely or on-site in the following durations:\n\n\n\n\n\n\n1 hour - overview of the tooling, available resources, best practices, etc. Configure and deploy a working seed app.   FREE OF CHARGE (remote).\n\n\n\n\n\n\nHalf day - Build, deploy and release a functional app, including dependent macros, use of a database, and release notes\n\n\n\n\n\n\nFull day - Design, build, deploy \n release a complex multi-user app\n\n\n\n\n\n\nFor more information, contact \nAllan Bowe\n via private message.\n\n\nPre-requisites\n\n\n\n\n\n\nYour own SAS Environment (SAS 9 or Viya).\n\n\n\n\n\n\nA location in the SAS 9 Folder tree or the SAS Viya folders service in which to create services (Stored Processes or Job Execution Services)\n\n\n\n\n\n\nA laptop with a browser, GIT, NPM and VSCodium text editor (or equivalent)\n\n\n\n\n\n\nIf the session is a half or a full day, then a library with WRITE access for data storage\n\n\n\n\n\n\nIf you are part of a remote workshop, a dual monitor setup is highly recommended\n\n\n\n\n\n\nSystem Checks\n\n\nTo save time on the day it will help to ensure that you have the above prerequisites. Checks can be made as follows:\n\n\nSAS Access\n\n\nYou will need an instance of SAS in order to build the backend! \n\n\nViya\n\n\nIf you are planning to use Viya, you will also need \nAdmin\n rights in order to get the API key.  You should be able to execute this code without errors:\n\noptions\n \nnoquotelenmax\n;\n\n\nfilename\n \nmc\n \nurl\n \nhttps://raw.githubusercontent.com/sasjs/core/main/base/mf_loc.sas\n;\n\n\n%inc\n \nmc\n;\n\n\ndata\n \n_null_\n;\n\n  \ninfile\n \n%mf_loc(VIYACONFIG)/etc/SASSecurityCertificateFramework/tokens/consul/default/client.token\n;\n\n  \ninput\n \ntoken\n:\n$64\n.;\n\n  \ncall\n \nsymputx\n(\nconsul_token\n,\ntoken\n);\n\n\nrun\n;\n\n\n\n\nIt is possible to build apps without admin rights, however you won't be able to auto-deploy using the CLI tool without a client and secret.\n\n\nYou also need the ability to create Job Execution services somewhere in the folder tree. You can check this using /SASJobExecution (or programmatically using SAS Studio).\n\n\nSAS 9\n\n\nYou need the ability to create stored processes somewhere in the folder tree. You can check this using SAS Management Console, or DI Studio, or Enterprise Guide (if enabled).  You can also try by creating programmatically using SAS Studio.\n\n\nLocal Tools\n\n\nWhilst you could develop on the server, typically builds and changes are made \nlocally\n and then deployed to a server. \n\n\nSo on your laptop or desktop you will need the following items of software:\n\n\nGIT\n\n\nThis is used mainly to clone the seed apps. Install from here: \nhttps://git-scm.com/\n. If you do not have admin rights, try this \nguide\n.\n\n\nNPM\n\n\nNode Package Manager (NPM) is a JavaScript framework for managing project dependencies. It also handles installations and a lot of other functionality. It can be downloaded here: \nhttps://nodejs.org/en/download\n. If you do not have admin rights, try this \nguide\n.\n\n\nVSCode\n\n\nYou don't necessarily need VSCode but it's a great editor and includes an integrated terminal for running commands. It can be downloaded (without telemetry) from here: \nhttps://vscodium.com/\n, and a portable version (installable without admin rights) can be obtained from this \nguide\n.\n\n\nFinal checks\n\n\nOpen VScode, select Terminal -\n New Terminal, and submit the following commands:\n\n\ngit --version\nnpm -v\nnode -v\n\n\n\n\nIf you get a version number for each of the above, and the version for \nnode\n is above 10.3, you're good to go!", 
            "title": "Workshops"
        }, 
        {
            "location": "/training/workshops/#workshops", 
            "text": "Are you looking to build the capability to deploy fresh and inspiring new interfaces into the SAS Platform? Get yourself off on the right foot with a live training package, review the best practices, pitfalls to avoid, and learn all the tips, tooling   techniques for rapid delivery and continuous deployment of SASjs Web Apps.", 
            "title": "Workshops"
        }, 
        {
            "location": "/training/workshops/#session-types", 
            "text": "Training is available either remotely or on-site in the following durations:    1 hour - overview of the tooling, available resources, best practices, etc. Configure and deploy a working seed app.   FREE OF CHARGE (remote).    Half day - Build, deploy and release a functional app, including dependent macros, use of a database, and release notes    Full day - Design, build, deploy   release a complex multi-user app    For more information, contact  Allan Bowe  via private message.", 
            "title": "Session Types"
        }, 
        {
            "location": "/training/workshops/#pre-requisites", 
            "text": "Your own SAS Environment (SAS 9 or Viya).    A location in the SAS 9 Folder tree or the SAS Viya folders service in which to create services (Stored Processes or Job Execution Services)    A laptop with a browser, GIT, NPM and VSCodium text editor (or equivalent)    If the session is a half or a full day, then a library with WRITE access for data storage    If you are part of a remote workshop, a dual monitor setup is highly recommended", 
            "title": "Pre-requisites"
        }, 
        {
            "location": "/training/workshops/#system-checks", 
            "text": "To save time on the day it will help to ensure that you have the above prerequisites. Checks can be made as follows:", 
            "title": "System Checks"
        }, 
        {
            "location": "/training/workshops/#sas-access", 
            "text": "You will need an instance of SAS in order to build the backend!", 
            "title": "SAS Access"
        }, 
        {
            "location": "/training/workshops/#viya", 
            "text": "If you are planning to use Viya, you will also need  Admin  rights in order to get the API key.  You should be able to execute this code without errors: options   noquotelenmax ;  filename   mc   url   https://raw.githubusercontent.com/sasjs/core/main/base/mf_loc.sas ;  %inc   mc ;  data   _null_ ; \n   infile   %mf_loc(VIYACONFIG)/etc/SASSecurityCertificateFramework/tokens/consul/default/client.token ; \n   input   token : $64 .; \n   call   symputx ( consul_token , token );  run ;   It is possible to build apps without admin rights, however you won't be able to auto-deploy using the CLI tool without a client and secret.  You also need the ability to create Job Execution services somewhere in the folder tree. You can check this using /SASJobExecution (or programmatically using SAS Studio).", 
            "title": "Viya"
        }, 
        {
            "location": "/training/workshops/#sas-9", 
            "text": "You need the ability to create stored processes somewhere in the folder tree. You can check this using SAS Management Console, or DI Studio, or Enterprise Guide (if enabled).  You can also try by creating programmatically using SAS Studio.", 
            "title": "SAS 9"
        }, 
        {
            "location": "/training/workshops/#local-tools", 
            "text": "Whilst you could develop on the server, typically builds and changes are made  locally  and then deployed to a server.   So on your laptop or desktop you will need the following items of software:", 
            "title": "Local Tools"
        }, 
        {
            "location": "/training/workshops/#git", 
            "text": "This is used mainly to clone the seed apps. Install from here:  https://git-scm.com/ . If you do not have admin rights, try this  guide .", 
            "title": "GIT"
        }, 
        {
            "location": "/training/workshops/#npm", 
            "text": "Node Package Manager (NPM) is a JavaScript framework for managing project dependencies. It also handles installations and a lot of other functionality. It can be downloaded here:  https://nodejs.org/en/download . If you do not have admin rights, try this  guide .", 
            "title": "NPM"
        }, 
        {
            "location": "/training/workshops/#vscode", 
            "text": "You don't necessarily need VSCode but it's a great editor and includes an integrated terminal for running commands. It can be downloaded (without telemetry) from here:  https://vscodium.com/ , and a portable version (installable without admin rights) can be obtained from this  guide .", 
            "title": "VSCode"
        }, 
        {
            "location": "/training/workshops/#final-checks", 
            "text": "Open VScode, select Terminal -  New Terminal, and submit the following commands:  git --version\nnpm -v\nnode -v  If you get a version number for each of the above, and the version for  node  is above 10.3, you're good to go!", 
            "title": "Final checks"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n\n\nMinimum Requirements\n\n\nTo build apps on SAS you need SAS Viya, or SAS 9 with Stored Process Server.  \n\n\nYou cannot create web apps on SAS with University Edition.\n\n\nTo check if you have SAS Viya, open SAS Studio, click your user profile and click \"About\".\n\n\nIf you are using Enterprise Guide, then simply run:\n\n\ndata\n \n_null_\n;\n\n  \nlength\n \nurl\n \n$\n128\n;\n\n  \nrc\n=\nMETADATA_GETURI\n(\nStored Process Web App\n,\nurl\n);\n\n  \nputlog\n \nYour SAS 9 url is: \n \nurl\n;\n\n\nrun\n;", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#minimum-requirements", 
            "text": "To build apps on SAS you need SAS Viya, or SAS 9 with Stored Process Server.    You cannot create web apps on SAS with University Edition.  To check if you have SAS Viya, open SAS Studio, click your user profile and click \"About\".  If you are using Enterprise Guide, then simply run:  data   _null_ ; \n   length   url   $ 128 ; \n   rc = METADATA_GETURI ( Stored Process Web App , url ); \n   putlog   Your SAS 9 url is:    url ;  run ;", 
            "title": "Minimum Requirements"
        }
    ]
}